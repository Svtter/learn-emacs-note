#+TITLE: emacs学习笔记
#+AUTHOR: svtter
#+OPTION: toc:2



学习Emacs似乎通过（文学编程）更好一些。

** reference

[[https://blog.15cm.net/2016/12/10/emacs-notes-system/][Emacs笔记系统构建]]

** Emacs 中 evil 问题的解决

evil 中的 tab 会无法展开org-mode中的标题，通过如下设置可以修正。
   
#+BEGIN_SRC
Try

(setq evil-want-C-i-jump nil)

in your ~/.emacs before

(require 'evil) 

Evil has, in evil-maps.el

(when evil-want-C-i-jump
  (define-key evil-motion-state-map (kbd "C-i") 'evil-jump-forward))
#+END_SRC


*** reference

[[https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working][StackOverflow]]


** 超链接问题

在emacs org mode 中，超链接不会全部显示，要么只显示 url，要么只显示 description，非常不方面。这个时候将光标移动到 url附近，
然后按 =C-c C-l= ，即可。

** 添加行内代码

1. 使用 ==行内代码== 或者 ~~行内代码~~ 即可。（感觉好像不对）
2. 使用如下方法：

#+BEGIN_SRC
While monospaced is good enough for most cases, inline code blocks have the form src_LANG[headers]{your code}. 
For example, src_xml[:exports code]{<tag>text</tag>}.
#+END_SRC

比如，src_xml[:exports code]{<tag>text</tag>}。

** 添加toc

在开头输入 =#+OPTION: toc:2= 即可显示二级目录。


** 理解递归

   学生在学习递归时，有时候是被鼓励在纸上追踪 (trace) 递归程序调用 (invocation) 的过程。 (288 页「译注：附录 A 追踪与回溯」可以看到一个递归函数的追踪过程。) 但这种练习可能会误导你：一个程序员在定义一个递归函数时，通常不会特别地去想函数的调用顺序所导致的结果。
   如果一个人总是需要这样子思考程序，递归会是艰难的、没有帮助的。递归的优点是它精确地让我们更抽象地来设计算法。你不需要考虑真正函数时所有的调用过程，就可以判断一个递归函数是否是正确的。
   要知道一个递归函数是否做它该做的事，你只需要问，它包含了所有的情况吗？
